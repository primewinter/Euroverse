<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CommunityMapper">	
 	
	<resultMap id="postSelectMap" type="post">
		<result property="postId" 			column="post_id" 			jdbcType="VARCHAR"/>
		<result property="postWriterId.userId"	column="post_writer_id" 		jdbcType="VARCHAR" />
		<result property="boardName" 	column="board_name" 		jdbcType="CHAR" />
		<result property="postGrade" 				column="post_grade" 					jdbcType="CHAR" />
		<result property="postTitle" 				column="post_title" 					jdbcType="VARCHAR" />
		<result property="postContent" 			column="post_content" 		jdbcType="VARCHAR" />
		<result property="postDate" 				column="post_date" 					jdbcType="TIMESTAMP" />
		<result property="accPerson" 				column="acc_person" 					jdbcType="NUMERIC" />
		<result property="accStartDate" 				column="acc_start_date" 					jdbcType="TIMESTAMP" />
		<result property="accEndDate" 				column="acc_end_date" 					jdbcType="TIMESTAMP" />
		<result property="postLikeCount" 				column="post_like_count" 					jdbcType="NUMERIC" />
		<result property="planId" 				column="plan_id" 					jdbcType="VARCHAR" /> 
		<result property="qnaFirstCate" 				column="qna_first_cate" 					jdbcType="CHAR" />
		<result property="qnaSecondCate" 				column="qna_second_cate" 					jdbcType="CHAR" />
		<result property="views" 				column="views" 					jdbcType="NUMERIC" />
		<result property="comments" 				column="comments" />
		<result property="blocked" 				column="blocked" 					jdbcType="CHAR" />
		<result property="deleted" 				column="deleted" 					jdbcType="CHAR" />
	</resultMap>
	
	<resultMap id="commentSelectMap" type="comment">
		<result property="rcmtId" 			column="cmt_id" 			jdbcType="VARCHAR"/>
		<result property="postId"	column="post_id" 		jdbcType="VARCHAR" />
		<result property="cmtId" 	column="parent_cmt_id" 		jdbcType="VARCHAR" />
		<result property="cmtWriterId.userId" 				column="writer_id" 					jdbcType="VARCHAR" />
		<result property="cmtContent" 				column="cmt_content" 					jdbcType="VARCHAR" />
		<result property="cmtDate" 			column="cmt_date" 		jdbcType="TIMESTAMP" />
		<result property="secret" 				column="secret" 					jdbcType="CHAR" />
		<result property="blocked" 				column="blocked" 					jdbcType="CHAR" />
		<result property="deleted" 				column="deleted" 					jdbcType="CHAR" />
		<result property="cmtLikeCount" 				column="cmt_like_count" 					jdbcType="NUMERIC" />
		<result property="cmtLikeFlag" 				column="like_check" 					jdbcType="CHAR" />
		<result property="postWriterId"	column="post_writer_id" 		jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="reportSelectMap" type="report">
		<result property="reportId" 			column="report_id" 			jdbcType="VARCHAR"/>
		<result property="reportTarget" 			column="report_target" 			jdbcType="CHAR"/>
		<result property="refId" 			column="ref_id" 			jdbcType="VARCHAR"/>
		<result property="reportReason" 			column="report_reason" 			jdbcType="CHAR"/>
		<result property="reportContent" 			column="report_content" 			jdbcType="VARCHAR"/>
		<result property="reportDate" 			column="report_date" 			jdbcType="TIMESTAMP"/>
		<result property="reportUserId" 			column="report_user_id" 			jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="tagSelectMap" type="tag">
		<result property="tagId"	column="tag_id"		jdbcType="VARCHAR"/>
		<result property="postId"	column="post_id"	jdbcType="VARCHAR"/>
		<result property="tagContent" column="tag_content" jdbcType="VARCHAR"/>
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addPost"		parameterType="post" >
		INSERT
		INTO post( post_id , post_writer_id , board_name , post_grade , post_title , post_content , post_date , views , blocked , deleted , post_like_count ) 
		VALUES	 ( SEQ_post_post_id.NEXTVAL , #{postWriterId.userId:VARCHAR} , #{boardName:CHAR} , #{postGrade:CHAR} , 
							#{postTitle:VARCHAR} , #{postContent:VARCHAR} , SYSDATE , #{views:NUMERIC} , #{blocked:CHAR} , 'F' , #{postLikeCount:NUMERIC} )
	</insert>
	
	<update id="update_postLike" parameterType="string">
	 	UPDATE post
	 	<set>
	 		post_like_count = post_like_count + 1
	 	</set>
		WHERE post_id = #{postId}
	</update>
	
	<update id="updateViews" parameterType="string">
	 	UPDATE post
	 	<set>
	 		views = views + 1
	 	</set>
		WHERE post_id = #{postId}
	</update>
	
	<update id="update_Like" parameterType="comment">
	 	UPDATE comments
	 	<set>
	 		cmt_like_count = #{cmtLikeCount}
	 	</set>
		WHERE parent_cmt_id = #{cmtId}
	</update>
	 
	<update id="update_Unlike" parameterType="comment">
	 	UPDATE comments
	 	<set>
	 		cmt_like_count = #{cmtLikeCount}
	 	</set>
	 	WHERE parent_cmt_id = #{cmtId} 
	</update>
	 
	<select id="select_Like" parameterType="string" resultType="int">
	 	SELECT
	 	post_like_count
	 	FROM post
		WHERE post_id = #{postId}
	</select>
	
	<select 	id="getPost"	parameterType="string"	resultMap="postSelectMap">
		SELECT
		post_id , post_writer_id , board_name , post_grade , post_title , post_content , post_date , views , blocked , deleted , post_like_count
		FROM post
		WHERE post_id = #{value}
	</select>
	
	<select  id="getPostList"  parameterType="map"	resultMap="postSelectMap">
	  	SELECT *
  		FROM ( SELECT inner_table.*, ROWNUM AS row_seq
  						FROM ( SELECT p.post_id , p.post_writer_id , p.board_name , p.post_grade , p.post_title , p.post_content , p.post_date , count(c.parent_cmt_id) comments , p.views , p.blocked , p.deleted , p.post_like_count
										FROM post p, comments c
										WHERE p.post_id = c.post_id(+) AND p.board_name = #{boardName}
										GROUP BY p.post_id , p.post_writer_id , p.board_name , p.post_grade , p.post_title , p.post_content , p.post_date , p.views , p.blocked , p.deleted , p.post_like_count
										<if test="searchCondition != null">
										  <trim prefix="WHERE" prefixOverrides="AND | OR">
											<if test="searchCondition == 0 and searchKeyword !='' ">
										 		post_title LIKE '%${searchKeyword}%'
											</if>
											<if test="searchCondition == 1 and searchKeyword !='' ">
										 		writer_id LIKE '%${searchKeyword}%'
											</if>
											<!-- <if test="searchCondition == 2 and searchKeyword !='' ">
										 		tag_content LIKE '%${searchKeyword}%'
											</if>
											<if test="searchCondition != null">
												AND p.prod_no=t.prod_no(+)
											</if> -->
										  </trim>
										</if>
										<!-- <if test="searchCondition == null">
										  <where>
											  p.prod_no=t.prod_no(+)
										  </where>
										</if> -->	
										ORDER BY p.post_date desc ) inner_table
  						WHERE ROWNUM <![CDATA[<=]]> #{search.currentPage}*#{search.pageSize} )
  		WHERE row_seq BETWEEN (#{search.currentPage}-1)*#{search.pageSize}+1
  		AND #{search.currentPage}*#{search.pageSize}
	</select>
	
	<!-- SQL : SELECT ROW Count -->	 
	<select  id="getPostTotalCount"  parameterType="map"	 resultType="int">
		SELECT COUNT(*)
	  	FROM(	SELECT	post_id , post_writer_id , board_name , post_grade , post_title , post_content , post_date , acc_person , acc_start_date , acc_end_date , qna_first_cate , qna_second_cate , views , blocked , deleted , post_like_count
				FROM post
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
					 			post_title LIKE '%${searchKeyword}%'
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
					 			writer_id LIKE '%${searchKeyword}%'
								</if>
								<if test="searchCondition == 2 and searchKeyword !='' ">
					 			tag_content LIKE '%${searchKeyword}%'
								</if>
								WHERE board_name = #{boardName}
							</where>
						</if>
				WHERE board_name = #{boardName} ) countTable						
	</select>

	<insert  id="addComment"		parameterType="comment">
		INSERT
		INTO comments( post_id , parent_cmt_id , writer_id , cmt_date , cmt_content , secret , blocked , deleted , cmt_like_count )
		VALUES	 ( #{postId:VARCHAR} , SEQ_comment_parent_cmt_id.NEXTVAL , #{cmtWriterId.userId:VARCHAR} , SYSDATE , 
							#{cmtContent:VARCHAR} , #{secret:CHAR} , 'F' , 'F' , 0 )
	</insert>
	
	<select id="getCommentList" parameterType="map" resultMap="commentSelectMap">
  		SELECT *
  		FROM ( SELECT inner_table.*, ROWNUM AS row_seq
  						FROM ( SELECT c.post_id , c.parent_cmt_id , c.writer_id , p.post_writer_id , c.cmt_date , c.cmt_content , c.secret , c.deleted , c.blocked , c.cmt_like_count , l.like_check 
										FROM comments c, likes l, post p
										WHERE p.post_id = c.post_id AND c.parent_cmt_id = l.ref_id(+) AND l.like_user_id(+) = #{userId} AND c.post_id = #{postId}
										ORDER BY c.cmt_date DESC ) inner_table
  						WHERE ROWNUM <![CDATA[<=]]> #{search.currentPage}*#{search.pageSize} )
  		WHERE row_seq BETWEEN (#{search.currentPage}-1)*#{search.pageSize}+1
  		AND #{search.currentPage}*#{search.pageSize}
	</select>
	
	<select  id="getCommentTotalCount"  parameterType="map"	 resultType="int">
		SELECT COUNT(*)
	  	FROM(	SELECT	post_id , parent_cmt_id , writer_id , cmt_date , cmt_content , secret , deleted , blocked
				FROM comments
				WHERE post_Id = #{postId} ) countTable						
	</select>
	
	<select 	id="getComment"	parameterType="string"	resultMap="commentSelectMap">
		SELECT
		post_id , parent_cmt_id , writer_id , cmt_date , cmt_content , secret , deleted , blocked , cmt_like_count
		FROM comments
		WHERE parent_cmt_id = #{cmtId}
	</select>
	
	<update id="updateComment" parameterType="comment">
		UPDATE comments
			<set>
				cmt_content = #{cmtContent:VARCHAR},
				secret      = #{secret:CHAR}
			</set>
		WHERE parent_cmt_id = #{cmtId}
	</update>
	
	<update id="deleteComment" parameterType="string">
		UPDATE comments
			<set>
				deleted = 'T'
			</set>
		WHERE parent_cmt_id = #{cmtId}
	</update>
	
	<insert id="addReport"	parameterType="report">
	INSERT
	INTO report( report_id , report_target , ref_id , report_reason , report_content , report_date , report_user_id ) 
	VALUES	( SEQ_report_report_id.NEXTVAL , #{reportTarget:CHAR} , #{refId:VARCHAR} , #{reportReason:CHAR} , 
							#{reportContent:VARCHAR} , SYSDATE , #{reportUserId:VARCHAR} )
	</insert>
	 
</mapper> 